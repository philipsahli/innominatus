openapi: 3.0.0
info:
  title: innominatus User API
  description: API for deploying Score specifications and managing applications, workflows, and resources
  version: 1.0.0
  contact:
    name: innominatus
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8081
    description: Local development server

paths:
  /api/specs:
    get:
      summary: List all deployed specs
      description: Returns all deployed Score specifications
      operationId: listSpecs
      tags:
        - Specs
      responses:
        '200':
          description: List of deployed specs
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/SpecResponse'
    post:
      summary: Deploy new Score spec
      description: Deploy a new Score specification to the orchestrator
      operationId: deploySpec
      tags:
        - Specs
      requestBody:
        required: true
        content:
          application/yaml:
            schema:
              $ref: '#/components/schemas/ScoreSpec'
      responses:
        '201':
          description: Successfully deployed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeployResponse'
        '400':
          description: Invalid YAML or request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/specs/{name}:
    get:
      summary: Get specific spec details
      description: Returns details of a specific deployed spec
      operationId: getSpec
      tags:
        - Specs
      parameters:
        - name: name
          in: path
          required: true
          description: Name of the spec
          schema:
            type: string
      responses:
        '200':
          description: Spec details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecResponse'
        '404':
          description: Spec not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete deployed spec
      description: Removes a deployed spec from the orchestrator
      operationId: deleteSpec
      tags:
        - Specs
      parameters:
        - name: name
          in: path
          required: true
          description: Name of the spec to delete
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Spec not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/environments:
    get:
      summary: List active environments
      description: Returns all active environments
      operationId: listEnvironments
      tags:
        - Environments
      responses:
        '200':
          description: List of environments
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/Environment'

  /api/workflows:
    get:
      summary: List workflow executions
      description: Returns workflow execution history with optional filtering
      operationId: listWorkflows
      tags:
        - Workflows
      parameters:
        - name: app
          in: query
          description: Filter by application name
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of results (default 50, max 100)
          schema:
            type: integer
            default: 50
            maximum: 100
        - name: offset
          in: query
          description: Number of results to skip (default 0)
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: List of workflow executions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkflowExecution'

  /api/workflows/{id}:
    get:
      summary: Get workflow execution details
      description: Returns details of a specific workflow execution
      operationId: getWorkflow
      tags:
        - Workflows
      parameters:
        - name: id
          in: path
          required: true
          description: Workflow execution ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Workflow execution details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowExecution'
        '404':
          description: Workflow not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/resources:
    get:
      summary: List resources
      description: Returns all resources, optionally filtered by application
      operationId: listResources
      tags:
        - Resources
      security:
        - sessionAuth: []
        - apiKeyAuth: []
      parameters:
        - name: app
          in: query
          description: Filter by application name
          schema:
            type: string
      responses:
        '200':
          description: List of resources
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'

  /api/resources/{id}:
    get:
      summary: Get resource details
      description: Returns details of a specific resource
      operationId: getResourceDetail
      tags:
        - Resources
      security:
        - sessionAuth: []
        - apiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Resource ID
          schema:
            type: string
      responses:
        '200':
          description: Resource details including state transitions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceDetail'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Transition resource state
      description: Transitions a resource to a new state
      operationId: transitionResourceState
      tags:
        - Resources
      security:
        - sessionAuth: []
        - apiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Resource ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - state
              properties:
                state:
                  type: string
                  enum: [requested, provisioning, ready, failed, deprovisioning, deleted]
                reason:
                  type: string
                metadata:
                  type: object
      responses:
        '200':
          description: Resource state updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
    patch:
      summary: Update resource health
      description: Updates the health status of a resource
      operationId: updateResourceHealth
      tags:
        - Resources
      security:
        - sessionAuth: []
        - apiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Resource ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                health_status:
                  type: string
                  enum: [healthy, unhealthy, unknown]
                error_message:
                  type: string
      responses:
        '200':
          description: Resource health updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
    delete:
      summary: Delete resource
      description: Deletes a specific resource
      operationId: deleteResource
      tags:
        - Resources
      security:
        - sessionAuth: []
        - apiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Resource ID
          schema:
            type: string
      responses:
        '200':
          description: Resource deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/applications/{name}:
    delete:
      summary: Delete application
      description: Deletes an application and all associated resources
      operationId: deleteApplication
      tags:
        - Applications
      security:
        - sessionAuth: []
        - apiKeyAuth: []
      parameters:
        - name: name
          in: path
          required: true
          description: Application name
          schema:
            type: string
      responses:
        '200':
          description: Application deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/applications/{name}/deprovision:
    post:
      summary: Deprovision application infrastructure
      description: Deprovisions all infrastructure for an application without deleting the spec
      operationId: deprovisionApplication
      tags:
        - Applications
      security:
        - sessionAuth: []
        - apiKeyAuth: []
      parameters:
        - name: name
          in: path
          required: true
          description: Application name
          schema:
            type: string
      responses:
        '200':
          description: Deprovisioning started
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/workflows/golden-paths/{path}/execute:
    post:
      summary: Execute golden path workflow
      description: Executes a predefined golden path workflow (e.g., deploy-app)
      operationId: executeGoldenPath
      tags:
        - Golden Paths
      security:
        - sessionAuth: []
        - apiKeyAuth: []
      parameters:
        - name: path
          in: path
          required: true
          description: Golden path name (e.g., deploy-app)
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Input parameters for the golden path workflow
      responses:
        '200':
          description: Golden path workflow executed
          content:
            application/json:
              schema:
                type: object
                properties:
                  workflow_id:
                    type: integer
                  message:
                    type: string
        '404':
          description: Golden path not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/stats:
    get:
      summary: Get dashboard statistics
      description: Returns statistics for the dashboard
      operationId: getStats
      tags:
        - Dashboard
      security:
        - sessionAuth: []
        - apiKeyAuth: []
      responses:
        '200':
          description: Dashboard statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_specs:
                    type: integer
                  total_environments:
                    type: integer
                  total_workflows:
                    type: integer
                  running_workflows:
                    type: integer
                  failed_workflows:
                    type: integer

  /api/workflow-analysis:
    get:
      summary: Analyze workflow
      description: Analyzes workflow dependencies and structure
      operationId: analyzeWorkflow
      tags:
        - Workflows
      security:
        - sessionAuth: []
        - apiKeyAuth: []
      responses:
        '200':
          description: Workflow analysis results
          content:
            application/json:
              schema:
                type: object
    post:
      summary: Analyze workflow (POST)
      description: Analyzes workflow dependencies and structure via POST
      operationId: analyzeWorkflowPost
      tags:
        - Workflows
      security:
        - sessionAuth: []
        - apiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Workflow analysis results
          content:
            application/json:
              schema:
                type: object

  /api/workflow-analysis/preview:
    get:
      summary: Preview workflow analysis
      description: Preview workflow analysis results
      operationId: previewWorkflowAnalysis
      tags:
        - Workflows
      security:
        - sessionAuth: []
        - apiKeyAuth: []
      responses:
        '200':
          description: Workflow analysis preview
          content:
            application/json:
              schema:
                type: object
    post:
      summary: Preview workflow analysis (POST)
      description: Preview workflow analysis results via POST
      operationId: previewWorkflowAnalysisPost
      tags:
        - Workflows
      security:
        - sessionAuth: []
        - apiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Workflow analysis preview
          content:
            application/json:
              schema:
                type: object

  /auth/login:
    post:
      summary: Web-based user login
      description: Authenticates a user via form submission (web interface)
      operationId: loginWeb
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: "alice"
                password:
                  type: string
                  format: password
      responses:
        '302':
          description: Redirect to dashboard on success
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /logout:
    post:
      summary: Logout current user
      description: Logs out the current user and clears session
      operationId: logout
      tags:
        - Authentication
      responses:
        '302':
          description: Redirect to login page
        '200':
          description: Logout successful

  /api/login:
    post:
      summary: API login
      description: Authenticates a user via JSON API (returns session token)
      operationId: loginAPI
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: "alice"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: string
                  username:
                    type: string
                  team:
                    type: string
                  role:
                    type: string
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/user-info:
    get:
      summary: Get current user information
      description: Returns information about the currently authenticated user
      operationId: getUserInfo
      tags:
        - Authentication
      security:
        - sessionAuth: []
        - apiKeyAuth: []
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  team:
                    type: string
                  role:
                    type: string
                  is_admin:
                    type: boolean
                  api_keys:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        created_at:
                          type: string
                          format: date-time
                  impersonation:
                    type: object
                    nullable: true
                    properties:
                      is_impersonating:
                        type: boolean
                      original_user:
                        type: object
                      impersonated_user:
                        type: object
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/profile:
    get:
      summary: Get user profile
      description: Returns the profile of the currently authenticated user
      operationId: getProfile
      tags:
        - Profile
      security:
        - sessionAuth: []
        - apiKeyAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  team:
                    type: string
                  role:
                    type: string
                  is_admin:
                    type: boolean
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/profile/api-keys:
    get:
      summary: List API keys
      description: Returns all API keys for the current user
      operationId: listAPIKeys
      tags:
        - Profile
      security:
        - sessionAuth: []
        - apiKeyAuth: []
      responses:
        '200':
          description: List of API keys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/APIKey'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Generate new API key
      description: Creates a new API key for the current user
      operationId: generateAPIKey
      tags:
        - Profile
      security:
        - sessionAuth: []
        - apiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: Descriptive name for the API key
                  example: "CI/CD Pipeline Key"
      responses:
        '201':
          description: API key created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  key:
                    type: string
                    description: The actual API key (only shown once)
                  created_at:
                    type: string
                    format: date-time
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/profile/api-keys/{id}:
    delete:
      summary: Revoke API key
      description: Revokes a specific API key for the current user
      operationId: revokeAPIKey
      tags:
        - Profile
      security:
        - sessionAuth: []
        - apiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: API key ID
          schema:
            type: string
      responses:
        '200':
          description: API key revoked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: API key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /health:
    get:
      summary: Health check
      description: Returns the health status of the service
      operationId: healthCheck
      tags:
        - Monitoring
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"

  /ready:
    get:
      summary: Readiness check
      description: Returns whether the service is ready to accept traffic
      operationId: readinessCheck
      tags:
        - Monitoring
      responses:
        '200':
          description: Service is ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ready"

  /metrics:
    get:
      summary: Prometheus metrics
      description: Returns metrics in Prometheus format
      operationId: getMetrics
      tags:
        - Monitoring
      responses:
        '200':
          description: Prometheus metrics
          content:
            text/plain:
              schema:
                type: string

components:
  schemas:
    SpecResponse:
      type: object
      required:
        - metadata
        - containers
        - resources
        - graph
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        containers:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Container'
        resources:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Resource'
        environment:
          $ref: '#/components/schemas/Environment'
        graph:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: Map of container names to their resource dependencies
          example:
            "container:main": ["db", "bucket"]

    ScoreSpec:
      type: object
      required:
        - apiVersion
        - metadata
        - containers
      properties:
        apiVersion:
          type: string
          example: "score.dev/v1b1"
        metadata:
          $ref: '#/components/schemas/Metadata'
        containers:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Container'
        resources:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Resource'
        environment:
          $ref: '#/components/schemas/Environment'
        workflows:
          type: object
          additionalProperties:
            type: object

    DeployResponse:
      type: object
      required:
        - message
        - name
      properties:
        message:
          type: string
          example: "Successfully deployed 'product-service'"
        name:
          type: string
          example: "product-service"
        environment:
          type: string
          example: "Creating ephemeral environment with TTL=24h"

    Metadata:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Application name from Score spec
          example: "product-service"

    Container:
      type: object
      required:
        - image
      properties:
        image:
          type: string
          description: Container image reference
          example: "ghcr.io/example/product-service:1.0.0"
        variables:
          type: object
          additionalProperties:
            type: string
          description: Environment variables for the container
          example:
            DBCONN: "postgresql://${resources.db.username}:${resources.db.password}@${resources.db.host}:${resources.db.port}/${resources.db.name}"
            BUCKET_NAME: "${resources.bucket.name}"

    Resource:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          description: Resource type
          example: "postgres"
          enum:
            - postgres
            - s3
            - route
            - redis
            - volume
        params:
          type: object
          additionalProperties: true
          description: Optional resource parameters
          example:
            path: "/products"
            port: 3000

    Environment:
      type: object
      properties:
        type:
          type: string
          enum:
            - ephemeral
            - persistent
          example: "ephemeral"
        ttl:
          type: string
          description: Time to live for ephemeral environments
          example: "24h"
        status:
          type: string
          example: "active"
        createdAt:
          type: string
          format: date-time
        resources:
          type: array
          items:
            type: string

    WorkflowExecution:
      type: object
      required:
        - id
        - appName
        - status
        - createdAt
      properties:
        id:
          type: integer
          format: int64
          example: 1
        appName:
          type: string
          example: "product-service"
        status:
          type: string
          enum:
            - pending
            - running
            - completed
            - failed
          example: "completed"
        createdAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
          nullable: true
        steps:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowStep'

    WorkflowStep:
      type: object
      required:
        - id
        - name
        - status
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: "Build container"
        status:
          type: string
          enum:
            - pending
            - running
            - completed
            - failed
        output:
          type: string
          nullable: true
        error:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
          nullable: true

    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Error message
          example: "No spec loaded"

    APIKey:
      type: object
      required:
        - id
        - name
        - created_at
      properties:
        id:
          type: string
          description: Unique API key identifier
          example: "key_abc123"
        name:
          type: string
          description: Descriptive name for the API key
          example: "CI/CD Pipeline Key"
        created_at:
          type: string
          format: date-time
          description: API key creation timestamp
        last_used:
          type: string
          format: date-time
          nullable: true
          description: Last time the API key was used

    ResourceDetail:
      allOf:
        - $ref: '#/components/schemas/Resource'
        - type: object
          properties:
            state_transitions:
              type: array
              description: History of state transitions for this resource
              items:
                type: object
                properties:
                  from_state:
                    type: string
                  to_state:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
                  user:
                    type: string
                  reason:
                    type: string
            health_status:
              type: string
              enum: [healthy, unhealthy, unknown]
            error_message:
              type: string
              nullable: true

  securitySchemes:
    sessionAuth:
      type: apiKey
      in: cookie
      name: session_id
      description: Session-based authentication via cookies
    apiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: API key authentication (use "Bearer <api_key>" format)

tags:
  - name: Authentication
    description: User authentication and session management
  - name: Profile
    description: User profile and API key management
  - name: Specs
    description: Score specification management
  - name: Environments
    description: Environment management
  - name: Workflows
    description: Workflow execution tracking
  - name: Resources
    description: Resource lifecycle management
  - name: Applications
    description: Application lifecycle and infrastructure management
  - name: Golden Paths
    description: Golden path workflow execution
  - name: Dashboard
    description: Dashboard statistics and metrics
  - name: Monitoring
    description: Health checks and metrics endpoints
