name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  # Go E2E Tests
  test-go-e2e:
    name: Go E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Prepare static files for embedding
        run: ./scripts/prepare-embed.sh

      - name: Run Go unit tests
        run: go test ./... -v -race -coverprofile=coverage.out -short

      - name: Run Go E2E tests (no Kubernetes)
        run: |
          # Run E2E tests that don't require Kubernetes
          export SKIP_DEMO_TESTS=1
          export SKIP_INTEGRATION_TESTS=1
          go test ./tests/e2e -v -run "TestValidate|TestAnalyze|TestGoldenPaths"

      - name: Upload Go coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.out
          flags: go
          name: go-coverage

  # Web UI E2E Tests
  test-web-ui-e2e:
    name: Web UI E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web-ui/package-lock.json

      - name: Install dependencies
        working-directory: web-ui
        run: npm ci

      - name: Install Playwright browsers
        working-directory: web-ui
        run: npx playwright install --with-deps chromium

      - name: Build Next.js app
        working-directory: web-ui
        run: npm run build

      - name: Run Playwright tests
        working-directory: web-ui
        run: npm run test:e2e
        env:
          CI: true
          BASE_URL: http://localhost:3000

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: web-ui/playwright-report/
          retention-days: 30

  # Integration Tests (with Kubernetes)
  test-integration-kubernetes:
    name: Integration Tests (K8s)
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[k8s]')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Set up Kubernetes (kind)
        uses: helm/kind-action@v1
        with:
          cluster_name: test-cluster
          version: v0.20.0

      - name: Verify Kubernetes cluster
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.13.0'

      - name: Run Kubernetes integration tests
        run: |
          # Run tests that require Kubernetes
          go test ./tests/e2e -v -run "TestDemo" -timeout 30m
        env:
          SKIP_DEMO_TESTS: ""  # Enable demo tests

  # Test Coverage Report
  coverage-report:
    name: Generate Coverage Report
    runs-on: ubuntu-latest
    needs: [test-go-e2e, test-web-ui-e2e]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Prepare static files for embedding
        run: ./scripts/prepare-embed.sh

      - name: Run tests with coverage
        run: |
          go test ./... -coverprofile=coverage.out -covermode=atomic
          go tool cover -func=coverage.out

      - name: Generate coverage summary
        run: |
          echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Go Packages" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          go tool cover -func=coverage.out | tail -20 >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverage = fs.readFileSync('coverage.out', 'utf8');
            const lines = coverage.split('\n');
            const totalLine = lines[lines.length - 2];
            const match = totalLine.match(/(\d+\.\d+)%/);
            const percentage = match ? match[1] : 'unknown';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Test Coverage Report\n\nTotal Coverage: **${percentage}%**\n\nView detailed report in the workflow artifacts.`
            });
